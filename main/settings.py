"""
Django settings for vocabulary project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import redis
import datetime
import logging.handlers

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '*6hk!K9*%n20YdlO%4!(*hkCy&6#0fQ9C12$%x1Xy&8Me$5'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    # 'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'main',
    'base',
    'django_filters'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'common.middleware.CustomRequestAndResponseMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'common.middleware.GlobalExceptionMiddleware'
]

ROOT_URLCONF = 'vocabulary.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': []
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'vocabulary.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'vocabulary',
        'USER': 'root',
        'PASSWORD': 'crius',
        'HOST': '127.0.0.1',
        'PORT': '3306'
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.func.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.func.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.func.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.func.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'

# 自定义环境信息
ENVIRONMENT = 'dev'

# 单个资源允许访问的请求方式
SAFE_METHODS = ['GET', 'HEAD', 'OPTIONS', 'POST', 'DELETE']

# 白名单
ALLOW_WHITE_URL = ['/ziwei/api/v1/base/user/checklogin',
                   '/api/v1/base/check/health',
                   '/ziwei/api/users/UserRefresh']

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': ['common.token.user_token_auth.BaseUserTokenAuth'],
    'DEFAULT_PAGINATION_CLASS': 'common.utils.pagination.PageNumberPagination',
    # 配置过滤
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'EXCEPTION_HANDLER': 'common.middleware.restful_exception_handler',
    'PAGE_SIZE': 10
}

# jwt载荷中的有效期设置
JWT_CONF = {
    # token 有效期
    'EXPIRED_HOUR': 8
}

# redis main缓存配置
REDIS_MAIN = {'host': '127.0.0.1', 'port': 6379, 'decode_responses': True}
REDIS_CACHE = redis.StrictRedis(**REDIS_MAIN)
REDIS_TOKEN_EXPIRE = 60

SESSION_COOKIE_NAME = 'vocabulary_token'

# git配置
GITLAB_TOKEN = {'gitlab.vocabulary.com': 'Zyw_sbMZ6n32p2zsQTUq'}
GIT_CLIENT = '/usr/bin/git'

# 用户头像地址前缀
BASE_AVATAR_URL = "http://ziwei.vocabulary.com/user/avatar"

from common.utils.json_log import JSONFormatter

DEVOPS_LOG = logging.getLogger(__name__)
DEVOPS_LOG.setLevel(logging.INFO)

# write log to file
handler = logging.handlers.TimedRotatingFileHandler("/tmp/ziwei_vocabulary.log", when="D", backupCount=5)
handler.setLevel(logging.INFO)
handler.setFormatter(JSONFormatter())

DEVOPS_LOG.addHandler(handler)

# 全局异步任务线程 ---- begin ----
import asyncio
import threading

# 创建子线程并等待
T_LOOP = asyncio.new_event_loop()


def start_loop(loop):
    asyncio.set_event_loop(loop)
    loop.run_forever()


t = threading.Thread(target=start_loop, args=(T_LOOP,), daemon=True)
t.start()
# 全局异步任务线程 ---- end ----


# 有道查询api
YOUDAO_WORD_API = 'http://fanyi.youdao.com/openapi.do?keyfrom=youdao111&key=60638690&type=data&doctype=json&version=1.1&q='
# SERVICE_NAME = 'vocabulary'
# SERVICE_PORT = 8082
# SERVICE_ID = f"{SERVICE_NAME}_{JSONFormatter.host_ip}_{SERVICE_PORT}"
# HTTP_CHECK = f"http://{JSONFormatter.host_ip}:{SERVICE_PORT}/api/v1/base/check/health"
# CONSUL_SERVER = ConsulClient('127.0.0.1', 8500)
#
# # CONSUL_SERVER.deregister(service_id=SERVICE_ID)
# CONSUL_SERVER.register(name=SERVICE_NAME, service_id=SERVICE_ID,
#                        address=JSONFormatter.host_ip, port=SERVICE_PORT,
#                        tags=['master'], interval='5s', url=HTTP_CHECK)
